{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","draggable","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAoBeA,EAlBI,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAQ9C,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACI,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,aAAaC,UAAU,UACjE,qBAAKH,UAAU,OAAOC,IAAI,iBAAiBC,IAAI,YAAYC,UAAU,QAAQC,QAVrE,WACXL,GACDF,EAAaD,YCFnBS,G,MAAa,CACf,CAAC,IAAO,oBAAqBC,SAAS,GACtC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,kBAAmBA,SAAS,GACpC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,oBAAqBA,SAAS,GACtC,CAAC,IAAO,mBAAoBA,SAAS,KA8E1BC,MA3Ef,WACI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOT,EAAP,KAAiBkB,EAAjB,KAGMC,EAAe,WACjB,IAAMC,EAAgB,UAAId,EAAeA,GACpCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC3B,GAAD,mBAAC,eAAcA,GAAf,IAAqB4B,GAAGH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAIPf,EAAe,SAACD,GAClBiB,EAAYG,EAAapB,GAAQkB,EAAalB,IAIlD6B,qBAAU,WACFZ,GAAaE,IACbE,GAAY,GAERJ,EAAUZ,MAAQc,EAAUd,KAC5BS,GAAS,SAAAgB,GACL,OAAOA,EAAUH,KAAI,SAAA3B,GACjB,OAAIA,EAAKK,MAAQY,EAAUZ,IAChB,2BAAIL,GAAX,IAAiBU,SAAS,IAEnBV,QAInB+B,KAEAC,YAAW,WACPD,MACD,QAGZ,CAACd,EAAWE,IAGf,IAAMY,EAAY,WACdb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAiB,GAAS,OAAIA,EAAY,KAClCZ,GAAY,IAQhB,OAJAQ,qBAAU,WACNP,MACF,IAGE,sBAAKlB,UAAU,MAAf,UACI,6CACA,wBAAQI,QAASc,EAAjB,sBACA,qBAAKlB,UAAU,YAAf,SACKS,EAAMc,KAAI,SAAA3B,GAAI,OACZ,cAAC,EAAD,CAA0BA,KAAMA,EAAMC,aAAcA,EAAcC,QAASF,IAASiB,GAAajB,IAASmB,GAAanB,EAAKU,QAASP,SAAUA,GAA9HH,EAAK4B,SAG7B,wCAAWb,SC9EvBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b252bf1e.chunk.js","sourcesContent":["import './singleCard.css'\n\nconst SingleCard = ({card, handleChoice, flipped, disabled}) => {\n\n    const handleClick = () => {\n        if (!disabled) {\n            handleChoice(card)\n        }\n    }\n    \n    return ( \n        <div className='card'>\n            <div className={flipped ? \"flipped\" : \"\"}>\n                <img className='front' src={card.src} alt='card front' draggable=\"false\"/>\n                <img className='back' src=\"/img/cover.png\" alt=\"card back\" draggable=\"false\" onClick={handleClick}/>\n            </div>\n        </div>\n     );\n}\n \nexport default SingleCard;","import { useEffect, useState } from 'react';\nimport SingleCard from './components/SingleCard';\nimport './App.css'\n\nconst cardImages = [\n    {\"src\": \"/img/helmet-1.png\", matched: false},\n    {\"src\": \"/img/potion-1.png\", matched: false},\n    {\"src\": \"/img/ring-1.png\", matched: false},\n    {\"src\": \"/img/scroll-1.png\", matched: false},\n    {\"src\": \"/img/shield-1.png\", matched: false},\n    {\"src\": \"/img/sword-1.png\", matched: false}\n];\n\nfunction App() {\n    const [cards, setCards] = useState([]);\n    const [turns, setTurns] = useState(0);\n    const [choiceOne, setChoiceOne] = useState(null)\n    const [choiceTwo, setChoiceTwo] = useState(null)\n    const [disabled, setDisabled] = useState(false)\n    \n    // shuffle cards\n    const shuffleCards = () => {\n        const shuffledCards = [...cardImages, ...cardImages]\n            .sort(() => Math.random() - 0.5)\n            .map((card) => ({...card, id:Math.random()}));\n\n        setChoiceOne(null)\n        setChoiceTwo(null)\n        setCards(shuffledCards);\n        setTurns(0)\n    }\n\n    // handle a choice\n    const handleChoice = (card) => {\n        choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    }\n\n    // compare 2 selected cards\n    useEffect(() => {\n        if (choiceOne && choiceTwo) {\n            setDisabled(true)\n\n            if (choiceOne.src === choiceTwo.src) {\n                setCards(prevCards => {\n                    return prevCards.map(card => {\n                        if (card.src === choiceOne.src) {\n                            return {...card, matched: true}\n                        } else {\n                            return card\n                        }\n                    })\n                })\n                resetTurn()\n            } else {\n                setTimeout(() => {\n                    resetTurn()\n                }, 1000);\n            }\n        }\n    }, [choiceOne, choiceTwo])\n\n    // reset choices & increase turn\n    const resetTurn = () => {\n        setChoiceOne(null);\n        setChoiceTwo(null);\n        setTurns(prevTurns => prevTurns + 1)\n        setDisabled(false)\n    }\n\n    // start a new game automatically\n    useEffect(()=> {\n        shuffleCards()\n    },[])\n\n    return (\n        <div className=\"App\">\n            <h1>Magic Match</h1>\n            <button onClick={shuffleCards}>New Game</button>\n            <div className=\"card-grid\">\n                {cards.map(card => (\n                   <SingleCard key={card.id} card={card} handleChoice={handleChoice} flipped={card === choiceOne || card === choiceTwo || card.matched} disabled={disabled}/>\n                ))}\n            </div>\n            <p>Turns: {turns}</p>\n        </div>\n    );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}